#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import traceback
from pathlib import Path
from typing import List, Tuple


def run_module(module_name: str, function_name: str) -> Tuple[bool, str]:
    """
    Uruchamia modu≈Ç i jego g≈Ç√≥wnƒÖ funkcjƒô.
    
    Args:
        module_name: Nazwa modu≈Çu do uruchomienia
        function_name: Nazwa funkcji g≈Ç√≥wnej do wywo≈Çania
        
    Returns:
        Krotka (sukces, komunikat)
    """
    try:
        # Import modu≈Çu
        module = __import__(module_name)
        
        # Sprawd≈∫ czy funkcja istnieje
        if hasattr(module, function_name):
            main_function = getattr(module, function_name)
            
            # Wywo≈Çaj funkcjƒô g≈Ç√≥wnƒÖ
            print(f"\n{'='*60}")
            print(f"üöÄ Uruchamianie: {module_name}")
            print(f"{'='*60}")
            
            main_function()
            
            return True, f"‚úÖ {module_name} zako≈Ñczony pomy≈õlnie"
            
        else:
            return False, f"‚ùå Funkcja {function_name} nie istnieje w module {module_name}"
            
    except ImportError as e:
        return False, f"‚ùå Nie mo≈ºna zaimportowaƒá modu≈Çu {module_name}: {e}"
        
    except Exception as e:
        error_msg = f"‚ùå B≈ÇƒÖd w module {module_name}: {e}"
        print(f"\n{error_msg}")
        print(f"Szczeg√≥≈Çy b≈Çƒôdu:")
        traceback.print_exc()
        return False, error_msg


def run_pipeline() -> None:
    """
    G≈Ç√≥wna funkcja uruchamiajƒÖca pipeline przetwarzania go≈õci.
    """
    
    # Lista modu≈Ç√≥w do uruchomienia w kolejno≈õci
    pipeline_modules = [
        ("preprocess_guests", "pre_filter_guests"),
        ("ai_tag_guests", "ai_tag_guests"),
        ("filter_guest_trends", "filter_guest_trends_main"),
        ("plot_filtered_guest_trends", "plot_filtered_guest_trends_main")
    ]
    
    # Dodaj opcjonalne modu≈Çy (je≈õli istniejƒÖ)
    optional_modules = [
        ("detect_guest_spikes", "main"),
        ("recommend_guests", "main")
    ]
    
    print("üéØ Uruchamianie pipeline'u przetwarzania go≈õci podcast√≥w")
    print("=" * 60)
    
    # Statystyki
    successful_modules = 0
    failed_modules = 0
    results = []
    
    # Uruchom g≈Ç√≥wne modu≈Çy
    for module_name, function_name in pipeline_modules:
        success, message = run_module(module_name, function_name)
        results.append((module_name, success, message))
        
        if success:
            successful_modules += 1
        else:
            failed_modules += 1
    
    # Sprawd≈∫ i uruchom opcjonalne modu≈Çy
    print(f"\n{'='*60}")
    print("üîç Sprawdzanie opcjonalnych modu≈Ç√≥w...")
    print(f"{'='*60}")
    
    for module_name, function_name in optional_modules:
        # Sprawd≈∫ czy plik modu≈Çu istnieje
        module_file = Path(f"{module_name}.py")
        if module_file.exists():
            success, message = run_module(module_name, function_name)
            results.append((module_name, success, message))
            
            if success:
                successful_modules += 1
            else:
                failed_modules += 1
        else:
            print(f"‚ö†Ô∏è  Modu≈Ç {module_name} nie istnieje - pomijam")
            results.append((module_name, False, f"Plik {module_name}.py nie istnieje"))
    
    # Podsumowanie
    print(f"\n{'='*60}")
    print("üìä PODSUMOWANIE PIPELINE'U")
    print(f"{'='*60}")
    
    for module_name, success, message in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {module_name}: {message}")
    
    print(f"\nüìà Statystyki:")
    print(f"  ‚Ä¢ Uruchomionych modu≈Ç√≥w: {len(results)}")
    print(f"  ‚Ä¢ Pomy≈õlnie: {successful_modules}")
    print(f"  ‚Ä¢ Z b≈Çƒôdami: {failed_modules}")
    print(f"  ‚Ä¢ Wsp√≥≈Çczynnik sukcesu: {successful_modules/len(results)*100:.1f}%")
    
    # Sprawd≈∫ kluczowe pliki wynikowe
    print(f"\nüìÅ Sprawdzanie plik√≥w wynikowych:")
    trends_dir = Path("trends")
    
    key_files = [
        "guest_candidates.csv",
        "guest_candidates_ai.csv", 
        "guest_trends_filtered.json",
        "filtered_guest_trends_plot.png"
    ]
    
    for file_name in key_files:
        file_path = trends_dir / file_name
        if file_path.exists():
            print(f"  ‚úÖ {file_name}")
        else:
            print(f"  ‚ùå {file_name} - brak")
    
    print(f"\n‚úÖ Pipeline zako≈Ñczony")


def main() -> None:
    """
    Funkcja g≈Ç√≥wna.
    """
    try:
        run_pipeline()
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Pipeline przerwany przez u≈ºytkownika")
    except Exception as e:
        print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd w pipeline: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main() 